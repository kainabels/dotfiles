" NeoBundle Settings {{{

" NeoBundle {{{
set nocompatible
if has('vim_starting')
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
" }}}

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
NeoBundle 'Shougo/vimproc', {
	\ 'build' : {
		\ 'windows' : 'make -f make_mingw32.mak',
		\ 'cygwin' : 'make -f make_cygwin.mak',
		\ 'mac' : 'make -f make_mac.mak',
		\ 'unix' : 'make -f make_unix.mak',
	\ },
	\}

" NeoComplete {{{
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if s:meet_neocomplete_requirements()
	" Lua 
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif
" }}}

" Unite {{{
NeoBundle 'Shougo/unite.vim'

" unite source: git
NeoBundle 'kmnk/vim-unite-giti'
" unite source: タグファイル
NeoBundle 'tsukkee/unite-tag'
" unite source: RoR
NeoBundle 'basyura/unite-rails'
" unite source: rubyのrequire
NeoBundle 'rhysd/unite-ruby-require.vim'
" unite source: QuickFix
NeoBundle 'osyo-manga/unite-quickfix'
" unite source: web-color
NeoBundle 'pasela/unite-webcolorname'
" unite source: help
NeoBundle 'tsukkee/unite-help'
" unite source: outline
NeoBundle 'h1mesuke/unite-outline'
" }}}

" neosnippet {{{
NeoBundle 'Shougo/neosnippet'
NeoBundle 'honza/vim-snippets'
" }}}

"NeoBundle 'tpope/vim-surround'

" 移動用 {{{
" 任意の場所へジャンプ
NeoBundle 'Lokaltog/vim-easymotion'
" 拡張f
NeoBundle 'rhysd/clever-f.vim'
" }}}

" 編集用一般 {{{
" if - end など対になる文字を自動で書き出す
NeoBundle 'tpope/vim-endwise'
" キーワードの切り替え
NeoBundle 'AndrewRadev/switch.vim'
" ビジュアルモードでブロックの移動
NeoBundle 't9md/vim-textmanip'
" コメントアウト
NeoBundle 'The-NERD-Commenter'
" 整列
NeoBundle 'h1mesuke/vim-alignta'

" }}}
"
" git 操作
NeoBundle 'tpope/vim-fugitive'
" shell
NeoBundle 'Shougo/vimshell'
" ファイラ
NeoBundle 'Shougo/vimfiler'
" ツリー表示
NeoBundle 'scrooloose/nerdtree'
" DB
NeoBundle 'vim-scripts/dbext.vim'
" AGで検索
NeoBundle 'rking/ag.vim'
" 実行
NeoBundle 'thinca/vim-quickrun'
" カラフルなステータスバー
NeoBundle 'itchyny/lightline.vim'
" sudo
NeoBundle 'sudo.vim'
" ファイルブラウザ
"NeoBundle 'ctrlp.vim'
" QuickFix で置換 
NeoBundle 'thinca/vim-qfreplace'
" ローカルの設定読み込み
NeoBundle 'thinca/vim-localrc'

" for WEB {{{

" HTML5
NeoBundle 'othree/html5.vim'
" CSS3
NeoBundle 'hail2u/vim-css3-syntax'
" SCSS
NeoBundle 'cakebaker/scss-syntax.vim'
" next zencoding
NeoBundle 'mattn/emmet-vim'
" WEBカラー表示
NeoBundle 'lilydjwg/colorizer'
" ブラウザを開く
NeoBundle 'tyru/open-browser.vim'

" }}}

" rails
NeoBundle 'tpope/vim-rails'
" markdown
NeoBundle 'plasticboy/vim-markdown'

" リファレンス
NeoBundle 'thinca/vim-ref'
" ruby-ri リファレンス参照
NeoBundle 'yuku-t/vim-ref-ri'

" text-object {{{
NeoBundle 'kana/vim-textobj-user'
" textobj: multi-block: asb, isb
NeoBundle "osyo-manga/vim-textobj-multiblock"
" textobj:コメント: ac, ic
NeoBundle 'thinca/vim-textobj-comment'
" textobj: 日時: ada, ida
NeoBundle 'kana/vim-textobj-datetime'
" textobj:diff: adf, idf
NeoBundle 'kana/vim-textobj-diff'
" textobj: バッファ全体: ae, ie
NeoBundle 'kana/vim-textobj-entire'
" textobj: between: af, if
NeoBundle 'thinca/vim-textobj-between'
" textobj:function: af, if
"NeoBundle 'kana/vim-textobj-function'
" textobj: function(javascript): af, if
"NeoBundle: 'thinca/vim-textobj-function-javascript'
" textobj: function(ruby): af, if
"NeoBundle 't9md/vim-textobj-function-ruby'
" textobj: インデント: ai, ii, aI, iI
NeoBundle 'kana/vim-textobj-indent'
" textobj: 行: al, il
NeoBundle 'kana/vim-textobj-line'
" textobj: 日本語括弧: aj, ij
NeoBundle 'kana/vim-textobj-jabraces'
" textobj: motion: am, im
NeoBundle 'hchbaw/textobj-motionmotion.vim'
" textobj: 正規表現: aq, iq
NeoBundle "deris/vim-textobj-enclosedsyntax"
" textobj:ruby: ar, ir
NeoBundle 'rhysd/vim-textobj-ruby'
" textobj:スペース: aS, iS
NeoBundle 'saihoooooooo/vim-textobj-space'
" textobj:url: au, iu
NeoBundle 'mattn/vim-textobj-url'
" textobj:継続行: av, iv
NeoBundle 'rhysd/vim-textobj-continuous-line'
" textobj: snake_case 上の単語: aw, iw
"NeoBundle 'h1mesuke/textobj-wiw'
" textobj: x(): axb, ixb
NeoBundle 'anyakichi/vim-textobj-xbrackets'
" textobj:syntax: ay, iy
NeoBundle 'kana/vim-textobj-syntax'
" textobj: ifdef: a#, i#
NeoBundle 'anyakichi/vim-textobj-ifdef'
" textobj: -区切りの文字列: a-, i-
NeoBundle 'RyanMcG/vim-textobj-dash'
" textobj: アンダースコア: a_, i_
NeoBundle 'kana/vim-textobj-underscore'
" }}}

" operator {{{
NeoBundle 'kana/vim-operator-user'
" operator: surround
NeoBundle 'rhysd/vim-operator-surround'
" operator: ag
NeoBundle 'tek/vim-operator-ag'
" operator: テーブル
NeoBundle 'pekepeke/vim-operator-tabular'
" Requires
NeoBundle 'pekepeke/vim-csvutil'

" operator: 置換
NeoBundle 'kana/vim-operator-replace'
" operator: コメント
NeoBundle 'emonkak/vim-operator-comment'
" operator: HTMLのエスケープ
NeoBundle 'tyru/operator-html-escape.vim'
" operator: snakecase <-> CamelCaseの変換
NeoBundle 'tyru/operator-camelize.vim'

" }}}


" Installation check.
NeoBundleCheck
" }}}

filetype plugin indent on

" 表示設定 {{{
" 行番号表示
set number
set title
set ruler
set showcmd
set wildmenu
set wildmode=list:full
set wildchar=<tab>
set matchtime=2
set cursorline
syntax on
set shortmess+=|
set statusline=%n\:%y%F\ \|%{(&fenc!=''?&fenc:&enc).'\|'.&ff.'\|'}%m%r%=
set laststatus=2
set modeline
set scrolloff=10
" }}}

" Key settings {{{
let mapleader = ","
" ,のデフォルトの機能は、\で使えるように退避
noremap \ ,
" C-@: 挿入モードから抜ける
imap <C-@> <C-[>
" ZQ: 保存せず終了は安全のため、外す
nnoremap ZQ <Nop>
" カーソル移動は見た目行で
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
" plugin用プレースホルダ
" 文字をレジスタに入れて挿入を開始(clと同じ)を潰す
nnoremap s <Nop>
" 入力した文字の左側までジャンプを潰す
nnoremap t <Nop>
" クリップボードからペースト
vnoremap <silent> <C-p> "0p<CR>
" paste-modeきりかえ
nnoremap <silent> <F10> :call Paste_on_off()<CR>
set pastetoggle=<F10>
" }}}

" Search settings {{{ 
set incsearch
set smartcase
set wrapscan
set ignorecase
" }}}

" * edit setting
set backspace=indent,eol,start
set fileformats=unix,dos,mac
" ビープは鳴らさない
set vb t_vb=
" バックアップは作らない
set nobackup
" 
set writebackup
" 編集中でも他のファイルを開けるように
set hidden
" 
set formatoptions=c,q,r,t

set foldmethod=marker

set nrformats-=octal
set clipboard=unnamed

" file encoding
set encoding=utf8
set termencoding=utf8
"set fileencoding=utf8
"set fileencodings=ucs-bom,euc-jp,cp932,iso-2022-jp
"set fileencodings+=,ucs-2le,ucs-2,utf-8
"set paste

" change current-directory on enter buffer.
"au BufEnter * execute ":lcd " . expand("%:p:h")
"

" Indent setting {{{
set ai
set si
set ci
"set noexpandtab
set ts=2
set sw=2
set softtabstop=0

au FileType python setlocal sw=4 ts=4 softtabstop=0 expandtab indentkeys+=0# nosmartindent
au FileType ruby setlocal sw=2 ts=2 softtabstop=0 indentkeys+=0#
" }}}

" neocomplcache settings {{{
if s:meet_neocomplete_requirements()
  " 新しく追加した neocomplete の設定
	" 自動起動
	let g:neocomplete#enable_at_startup = 1
	" 大文字が入力されるまで大文字小文字無視
	let g:neocomplete#enable_smart_case = 1
	" キャッシュの最小文字数
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	" 自動的に補完しないバッファ名の設定
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
			\ 'default' : '',
			\ 'vimshell' : $HOME.'/.vimshell_hist',
			\ 'scheme' : $HOME.'/.gosh_completions'
					\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
			let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplete#undo_completion()
	inoremap <expr><C-l>     neocomplete#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplete#smart_close_popup() . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplete#close_popup()
	inoremap <expr><C-e>  neocomplete#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplete#enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplete#enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplete#enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplete#enable_auto_select = 1
	"let g:neocomplete#disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	" Enable heavy omni completion.
	if !exists('g:neocomplete#sources#omni#input_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
	let g:neocomplete#sources#omni#input_patterns.scss = '^\s\+\w\+\|\w\+[):;]\?\s\+\|[@!]'
	" 強制上書き
	let g:neocomplete#force_overwrite_completefunc = 1

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
	  return neocomplete#smart_close_popup() . "\<CR>"
	  " For no inserting <CR> key.
	  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
	endfunction
else
    " 今までの neocomplcache の設定
	let g:neocomplcache_enable_at_startup = 1
	let g:neocomplcache_enable_smart_case = 1

	let g:neocomplcache_min_syntax_length = 3
	let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

	let g:neocomplcache_enable_underbar_completion = 1

	let g:neocomplcache_dictionary_filetype_lists = {
	    \ 'default' : '',
	    \ 'vimshell' : $HOME.'/.vimshell_hist',
	    \ 'scheme' : $HOME.'/.gosh_completions'
	        \ }
	" Define keyword.
	if !exists('g:neocomplcache_keyword_patterns')
			let g:neocomplcache_keyword_patterns = {}
	endif
	let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	inoremap <expr><C-g>     neocomplcache#undo_completion()
	inoremap <expr><C-l>     neocomplcache#complete_common_string()

	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplcache#smart_close_popup() . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
	endfunction
	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
	inoremap <expr><C-y>  neocomplcache#close_popup()
	inoremap <expr><C-e>  neocomplcache#cancel_popup()
	" Close popup by <Space>.
	"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

	" For cursor moving in insert mode(Not recommended)
	"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
	"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
	"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
	"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
	" Or set this.
	"let g:neocomplcache_enable_cursor_hold_i = 1
	" Or set this.
	"let g:neocomplcache_enable_insert_char_pre = 1

	" AutoComplPop like behavior.
	"let g:neocomplcache_enable_auto_select = 1

	" Shell like behavior(not recommended).
	"set completeopt+=longest
	"let g:neocomplcache_enable_auto_select = 1
	"let g:neocomplcache_disable_auto_complete = 1
	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

	" Enable omni completion.
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplcache_omni_patterns = {}
	endif
	let g:neocomplcache_omni_patterns.scss = '^\s\+\w\+\|\w\+[):;]\?\s\+\|[@!]'

	let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

	" For perlomni.vim setting.
	" https://github.com/c9s/perlomni.vim
	let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" 強制上書き
	let g:neocomplcache_force_overwrite_completefunc = 1
	"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
endif
" }}}

" neosnippet settings {{{
" for snippets
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" }}}

" unite.vim settings {{{
" インサートモードで起動
let g:unite_enable_start_insert = 1
let g:unite_source_history_yank_enable = 1
let g:unite_source_file_mru_limit = 200
" スペースキーに変更
nnoremap [unite] <Nop>
nmap <Space>u [unite]
nnoremap [unite]u :<C-u>Unite 
nnoremap [unite]r :<C-u>Unite rails/
nnoremap [unite]rc :<C-u>Unite rails/controller<CR>
nnoremap [unite]rm :<C-u>Unite rails/model<CR>
nnoremap [unite]rv :<C-u>Unite rails/view<CR>
nnoremap [unite]rs :<C-u>Unite rails/stylesheet<CR>
nnoremap [unite]rj :<C-u>Unite rails/javascript<CR>
nnoremap [unite]rr :<C-u>Unite rails/route<CR>
nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
"nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru buffer<CR>
nnoremap <silent> [unite]g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> [unite]s :<C-u>UniteResume search-buffer<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings() "{{{
	nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction "}}}

"" unite-grep {{{
" unite-grepのバックエンドをagに切り替える
" http://qiita.com/items/c8962f9325a5433dc50d
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nocolor --nogroup --column'
let g:unite_source_grep_recursive_opt = ''
let g:unite_source_grep_max_candidates = 200
" unite-grepのキーマップ
" 選択した文字列をunite-grep
" <a href="https://github.com/shingokatsushima/dotfiles/blob/master/.vimrc" target="_blank" rel="noreferrer" style="cursor:help;display:inline !important;">https://github.com/shingokatsushima/dotfiles/blob/master/.vimrc</a>
vnoremap /g y:Unite grep:.::<C-R>=escape(@", '\\.*$^[]')<CR><CR>
" }}}

" unite-ruby-require.vim {{{
let g:unite_source_ruby_require_cmd = '/Users/knsky/.rbenv/shims/ruby'
" }}}

" }}}

" vim-filer {{{
"vimデフォルトのエクスプローラをvimfilerで置き換える
let g:vimfiler_as_default_explorer = 1
""セーフモードを無効にした状態で起動する
let g:vimfiler_safe_mode_by_default = 0
"現在開いているバッファのディレクトリを開く
nnoremap <silent> <Leader>fe :<C-u>VimFilerBufferDir -quit<CR>
""現在開いているバッファをIDE風に開く
nnoremap <silent> <Leader>fi :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>
" }}}

" NERDCommenter settings {{{
" コメントした後に挿入するスペースの数
let NERDSpaceDelims = 1
" キーマップの変更。<Leader>=\+cでコメント化と解除を行う。
" コメントされていれば、コメントを外し、コメントされてなければコメント化する。
nmap <Leader>c <Plug>NERDCommenterToggle
vmap <Leader>c <Plug>NERDCommenterToggle
" }}}

" matchit
source $VIMRUNTIME/macros/matchit.vim

" switch.vim {{{
nnoremap + :call switch#Switch(g:variable_style_switch_definitions)<cr>
nnoremap - :Switch<cr>
" }}}

" lightline settings {{{
let g:lightline = {
      \ 'colorscheme': 'landscape',
      \ }
" }}}

" textmanip.vim settings {{{
let g:textmanip_enable_mappings = 0
vmap <C-j> <Plug>(textmanip-move-down)
vmap <C-k> <Plug>(textmanip-move-up)
vmap <C-h> <Plug>(textmanip-move-left)
vmap <C-l> <Plug>(textmanip-move-right)
" }}}

" operator settings {{{
noremap [op] <Nop>
map s [op]

" operator:surround {{{
map <silent>[op]sa <Plug>(operator-surround-append)
map <silent>[op]sd <Plug>(operator-surround-delete)
map <silent>[op]sr <Plug>(operator-surround-replace)
" delete or replace most inner surround
" if you use vim-textobj-multiblock
nmap <silent>[op]sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap <silent>[op]srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

" if you use vim-textobj-between
nmap <silent>[op]sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
nmap <silent>[op]srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
" }}}

" operator: replace
map <silent>[op]r  <Plug>(operator-replace)

" operator: ag
map <silent>[op]g <Plug>(operator-ag)
map <silent>[op]G <Plug>(operator-agg)

" operator: HTMLエスケープ
map <silent>[op]h  <Plug>(operator-html-escape)
map <silent>[op]H  <Plug>(operator-html-unescape)

" operator: snakecase <-> Camelcase
map <silent>[op]c <Plug>(operator-camelize-toggle)

" operator: コメント
map <silent>[op]cu  <Plug>(operator-uncomment)
map <silent>[op]cc  <Plug>(operator-comment)

" operator: テーブル
map <silent>[op]tt <Plug>(operator-tabular-tsv2md)
map <silent>[op]tc <Plug>(operator-tabular-csv2md)
map <silent>[op]tT <Plug>(operator-tabular-md2tsv)
map <silent>[op]tC <Plug>(operator-tabular-md2csv)

" }}}


"-------------------------------------------------
" ユーザー定義関数
"-------------------------------------------------
 
" Paste Mode 切り替え {{{
let paste_mode = 0 " 0 = normal, 1 = paste
 
function! Paste_on_off()
    if g:paste_mode == 0
        set paste
        let g:paste_mode = 1
    else
        set nopaste
        let g:paste_mode = 0
    endif
    return
endfunc
" }}}

" 入力モードの時にステータスラインの色を変える。 {{{
" let g:hi_insert = 'highlight StatusLine guifg=LightGrey guibg=darkblue gui=none ctermfg=white ctermbg=blue cterm=none'

" if has('syntax')
" augroup InsertHook
  " autocmd!
  " autocmd InsertEnter * call s:StatusLine('Enter')
  " autocmd InsertLeave * call s:StatusLine('Leave')
" augroup END
" endif

" let s:slhlcmd = ''
" function! s:StatusLine(mode)
  " if a:mode == 'Enter'
    " silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    " silent exec g:hi_insert
  " else
    " highlight clear StatusLine
    " silent exec s:slhlcmd
  " endif
" endfunction

" function! s:GetHighlight(hi)
  " redir => hl
  " exec 'highlight '.a:hi
  " redir END
  " let hl = substitute(hl, '[\r\n]', '', 'g')
  " let hl = substitute(hl, 'xxx', '', '')
  " return hl
" endfunction
" }}}

