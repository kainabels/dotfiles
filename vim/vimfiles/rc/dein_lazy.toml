[[plugins]] # sudo
repo = 'vim-scripts/sudo.vim'
on_if = 1

[[plugins]] # unite source: mru
repo = 'Shougo/neomru.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
"{{{
	" インサートモードで起動
	let g:unite_enable_start_insert = 1
	let g:unite_source_history_yank_enable = 1
	let g:unite_source_file_mru_limit = 200
  " 大文字小文字を区別しない
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
	" スペースキーに変更
	nnoremap [unite] <Nop>
	nmap <Space>u [unite]
	nnoremap [unite]u :<C-u>Unite 
	"nnoremap [unite]r :<C-u>Unite rails/
	"nnoremap [unite]rc :<C-u>Unite rails/controller<CR>
	"nnoremap [unite]rm :<C-u>Unite rails/model<CR>
	"nnoremap [unite]rv :<C-u>Unite rails/view<CR>
	"nnoremap [unite]rs :<C-u>Unite rails/stylesheet<CR>
	"nnoremap [unite]rj :<C-u>Unite rails/javascript<CR>
	"nnoremap [unite]rr :<C-u>Unite rails/route<CR>
	"nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
	nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
	nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]F :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
	"nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
	nnoremap <silent> [unite]m :<C-u>Unite file_mru buffer<CR>
	nnoremap <silent> [unite]g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
	"nnoremap <silent> [unite]s :<C-u>UniteResume search-buffer<CR>
	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()
		nmap <buffer> <ESC> <Plug>(unite_exit)
	endfunction 
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
  endif
  " 選択した文字列をunite-grep
  " https://github.com/shingokatsushima/dotfiles/blob/master/.vimrc
  vnoremap ,g y:Unite grep:.::<C-R>=escape(@", '\\.*$^[]')<CR><CR>
"}}}'''

[[plugins]]
repo = 'pasela/unite-webcolorname'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti'
on_source = 'unite.vim'

[[plugins]] # unite source: タグファイル
repo = 'tsukkee/unite-tag'
on_source = 'unite.vim'

[[plugins]] # unite source: RoR
repo = 'basyura/unite-rails'
on_source = 'unite.vim'

[[plugins]] 
repo = 'rhysd/unite-ruby-require.vim'
on_source = 'unite.vim'
hook_source = '''
let g:unite_source_ruby_require_cmd = '/Users/knsky/.rbenv/shims/ruby'
'''

[[plugins]] 
repo = 'osyo-manga/unite-quickfix'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neossh.vim'
on_ft = ['vimfiler', 'vimshell']

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = [['n', '<Plug>']]
on_if = "isdirectory(bufname('%'))"
hook_source = 'source ~/.vim/rc/plugins/vimfiler.rc.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = [['n', '<Plug>']]
hook_add = 'nmap [Space]s  <Plug>(vimshell_switch)'
hook_source = 'source ~/.vim/rc/plugins/vimshell.rc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
#hook_source = 'source ~/.vim/rc/plugins/neosnippet.rc.vim'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = [['nx', '<Plug>']]
hook_add = '''
xmap p <Plug>(operator-replace)
'''

[[plugins]] # operator: surround
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = [['n', '<Plug>']]
hook_add = '''
"{{{
map <silent>[op]a <Plug>(operator-surround-append)
map <silent>[op]d <Plug>(operator-surround-delete)
map <silent>[op]r <Plug>(operator-surround-replace)
" delete or replace most inner surround
" if you use vim-textobj-multiblock
nmap <silent>[op]dd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap <silent>[op]rr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

" if you use vim-textobj-between
nmap <silent>[op]db <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
nmap <silent>[op]rb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
"}}}'''

[[plugins]]
repo = 'vim-scripts/The-NERD-Commenter'
on_if = 1
hook_add = '''
"{{{
" コメントした後に挿入するスペースの数
let NERDSpaceDelims = 1
" キーマップの変更。<Leader>=\+cでコメント化と解除を行う。
" コメントされていれば、コメントを外し、コメントされてなければコメント化する。
nmap <Leader>c <Plug>NERDCommenterToggle
vmap <Leader>c <Plug>NERDCommenterToggle
"}}}'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = ['Ag', 'AgAdd', 'AgFromSearch', 'LAg', 'LAgAdd', 'AgFile', 'AgHelp']

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
source ~/.vim/rc/plugins/neocomplete.rc.vim
'''
[[plugins]] # 拡張incsearch
repo = 'haya14busa/incsearch.vim'
on_map = [['n', '<Plug>']]
hook_add = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
'''

[[plugins]] # 任意の場所へジャンプ
repo = 'easymotion/vim-easymotion'
on_map = [['n', '<Plug>']]
hook_add = '''
"{{{
nmap w <Plug>(easymotion-lineforward)
nnoremap W     w
nmap b <Plug>(easymotion-linebackward)
nnoremap B     b
nmap <Leader>j <Plug>(easymotion-j)
nmap <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0
let g:EasyMotion_show_prompt = 0
let g:EasyMotion_verbose = 0
"}}}'''

[[plugins]] # 整列
repo = 'h1mesuke/vim-alignta'
on_source = 'unite.vim'

[[plugins]] # 繰り返し簡単
repo = 'kana/vim-submode'
on_event = ['VimEnter']
hook_post_source = '''
"{{{
call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>-')
call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>+')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>-')
call submode#map('winsize', 'n', '', '-', '<C-w>+')

call submode#enter_with('changetab', 'n', '', 'gt', 'gt')
call submode#enter_with('changetab', 'n', '', 'gT', 'gT')
call submode#map('changetab', 'n', '', 't', 'gt')
call submode#map('changetab', 'n', '', 'T', 'gT')

call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '+', 'g+')
"}}}'''

[[plugins]] # if - end など対になる文字を自動で書き出す
repo = 'tpope/vim-endwise'
on_event = 'InsertCharPre'

[[plugins]] # キーワードの切り替え
repo = 'AndrewRadev/switch.vim'
on_event = ['VimEnter']
hook_add = '''
"{{{
nnoremap + :call switch#Switch(g:variable_style_switch_definitions)<cr>
nnoremap - :Switch<cr>
"}}}'''

[[plugins]] # lint
repo = 'scrooloose/syntastic'
on_event = ['VimEnter']
hook_source = '''
"{{{
let g:syntastic_mode_map = { 'mode': 'passive',
            \ 'active_filetypes': ['ruby', 'javascript', 'javascript.jsx'] }
"let g:syntastic_quiet_warnings = 0
""let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_enable_signs=1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_javascript_checkers = ['eslint']
"}}}'''


[[plugins]]
repo = 'cohama/agit.vim'
on_event = ['VimEnter']

[[plugins]]
repo = 'rhysd/committia.vim'
on_event = ['VimEnter']

[[plugins]]
repo = 'idanarye/vim-merginal'
on_event = ['VimEnter']

#[[plugins]]
#repo = 'w0ng/vim-hybrid'
#on_event = ['VimEnter']

#[[plugins]]
#repo = 'chriskempson/vim-tomorrow-theme'
#on_event = ['VimEnter']
#hook_post_source = '''
#set background
#colorscheme Tomorrow-Night
#'''
[[plugins]]
repo = 'dracula/vim'
on_event = ['VimEnter']
hook_post_source = '''
colorscheme dracula
'''

[[plugins]] # ステータスバー
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive', 'vim-gitgutter']
on_event = ['VimEnter']
hook_post_source = '''
"{{{
let g:lightline = {
      \ 'colorscheme': 'dracula',
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['fugitive', 'gitgutter'],
      \   ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'gitgutter': 'MyGitGutter',
      \ },
    \ }

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? ' '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction
"}}} '''

#[[plugins]] # ステータスバーテーマ
#repo = 'cocopon/lightline-hybrid.vim'
#on_event = ['VimEnter']

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_event = ['VimEnter']
